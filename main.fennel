(local fennel (require :fennel))

(fn p [x]
  (print (fennel.view x))
  x)

(lambda keys [t]
  (icollect [k v (pairs t)] k))

(lambda sum [xs]
  (accumulate [result 0
               _ x (ipairs xs)]
    (+ result x)))

(lambda sorted-pairs [t]
  (local sorted-keys (keys t))
  (table.sort sorted-keys)
  (var i 1)
  (lambda []
    (let [k (. sorted-keys i)
          v (. t k)]
      (set i (+ i 1))
      (when k (values k v)))))

(lambda resolve [ps u]
  (.
    (accumulate [[r s] [nil 0]
                  k v (sorted-pairs ps)]
      (if (>= (+ s v) u)
        (if (= nil r)
          [k (+ s v)]
          [r (+ s v)])
        [nil (+ s v)]))
    1))

(lambda total-observations-for [obs-a]
  (sum (icollect [_ v (pairs obs-a)] v)))

(lambda total-observations [obs]
  (sum (icollect [_ v1 (pairs obs)]
          (total-observations-for v1))))

(lambda probabilities-given [obs a]
  (let [a-obs (. obs a)]
    (if a-obs
      (collect [k v (pairs a-obs)]
         (values k (/ v (total-observations-for a-obs))))
      {})))

(lambda register-observation [obs s x]
  ;; [TODO] Don't mutate the table directly
  (if (not (. obs s))
    (tset obs s {x 1})
    (tset (. obs s) x (+ 1 (or (. obs s x) 0))))
  obs)

(lambda register-observations [obs xs]
  (let [[obs1 s]
        (accumulate [[obs1 s] [obs :.]
                     _ x (ipairs xs)]
          [(register-observation obs1 s x) x])]
    (register-observation obs1 s :.)))

(lambda chars [s]
  (var i 1)
  (lambda []
    (let [c (s:sub i i)]
      (when (<= i (length s))
        (set i (+ i 1))
        c))))

(lambda register-word [obs word]
  (register-observations
    obs
    (icollect [c (chars word)] c)))

(lambda split-words [s]
  (var words [])
  (var word "")
  (icollect [c (chars s)]
    (if (= " " c)
      (when (not (= "" word))
        (table.insert words word)
        (set word ""))
      (set word (.. word c))))
  (when (not (= "" word))
    (table.insert words word))
  words)

(lambda register-words [obs s]
  (accumulate [obs {}
               _ word (ipairs (split-words s))]
    (register-word obs word)))

(p (register-words {} "the cat sat on the mat"))

