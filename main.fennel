(local fennel (require :fennel))

(fn p [x]
  (print (fennel.view x))
  x)

(lambda keys [t]
  (icollect [k v (pairs t)] k))

(lambda sum [xs]
  (accumulate [result 0
               _ x (ipairs xs)]
    (+ result x)))

(lambda sorted-pairs [t]
  (local sorted-keys (keys t))
  (table.sort sorted-keys)
  (var i 1)
  (lambda []
    (let [k (. sorted-keys i)
          v (. t k)]
      (set i (+ i 1))
      (when k (values k v)))))

(lambda resolve [ps u]
  (.
    (accumulate [[r s] [nil 0]
                  k v (sorted-pairs ps)]
      (if (>= (+ s v) u)
        (if (= nil r)
          [k (+ s v)]
          [r (+ s v)])
        [nil (+ s v)]))
    1))

(lambda total-observations-for [obs-a]
  (sum (icollect [_ v (pairs obs-a)] v)))

(lambda total-observations [obs]
  (sum (icollect [_ v1 (pairs obs)]
          (total-observations-for v1))))

(lambda probabilities-given [obs a]
  (let [a-obs (. obs a)]
    (if a-obs
      (collect [k v (pairs a-obs)]
         (values k (/ v (total-observations-for a-obs))))
      {})))

(local example-observations
 {:a {:a 3
      :b 8}
  :b {:b 3
      :. 1}
  :c {:a 1}})

(p (resolve (probabilities-given example-observations :b)
            0.5))

